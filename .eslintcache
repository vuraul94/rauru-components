[{"C:\\Users\\vurau\\Desktop\\rauru-components\\src\\stories\\MultiInput.stories.js":"1","C:\\Users\\vurau\\Desktop\\rauru-components\\src\\stories\\MultiInput.js":"2","C:\\Users\\vurau\\Desktop\\rauru-components\\src\\stories\\RichTextEditor.stories.js":"3","C:\\Users\\vurau\\Desktop\\rauru-components\\src\\stories\\RichTextEditor.js":"4"},{"size":1282,"mtime":1609875661781,"results":"5","hashOfConfig":"6"},{"size":4647,"mtime":1609796770217,"results":"7","hashOfConfig":"6"},{"size":588,"mtime":1609882565015,"results":"8","hashOfConfig":"6"},{"size":6895,"mtime":1609882793194,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rrk64b",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\vurau\\Desktop\\rauru-components\\src\\stories\\MultiInput.stories.js",["20","21","22","23","24"],"C:\\Users\\vurau\\Desktop\\rauru-components\\src\\stories\\MultiInput.js",["25"],"import React, { useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * An Input that saves multiple values (This can be usefull with tags or saving multiple urls)\r\n */\r\nexport const MultiInput = ({\r\n  placeholder,\r\n  Wrapper = React.Fragment,\r\n  wrapperProps = {},\r\n  values = [],\r\n  onChange,\r\n  KeyPrefix = \"multi-input\",\r\n  regex,\r\n  regexMsg,\r\n  height,\r\n  width,\r\n  color,\r\n  textColor,\r\n}) => {\r\n  const multiInputRef = useRef();\r\n  const errorMsg = useRef();\r\n\r\n  const handleKeyPress = (e) => {\r\n    //Add a new value when the key pressed is Enter or \",\"\r\n    if (e.key === \",\" || e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      const newValue = e.target.value;\r\n      //Verify if the new value fit with the regular expression setted in the props\r\n      if (!regex || new RegExp(regex).test(newValue)) {\r\n        const newValues = [...values, newValue];\r\n        onChange(newValues);\r\n        multiInputRef.current.value = \"\";\r\n        errorMsg.current.innerText = \"\";\r\n      } else {\r\n        errorMsg.current.innerText = regexMsg;\r\n      }\r\n      //Clean the input value\r\n    }\r\n  };\r\n\r\n  const removeItem = (index) => {\r\n    // const newValues = values.filter((value) => value !== values[index]);\r\n    const newValues = [\r\n      ...values.slice(0, index),\r\n      ...values.slice(index + 1, values.length),\r\n    ];\r\n    onChange(newValues);\r\n  };\r\n\r\n  const generateElements = () => {\r\n    return values.map((value, i) => {\r\n      const props = Wrapper !== React.Fragment ? wrapperProps : null;\r\n      if (Wrapper === \"a\") {\r\n        props.href = value;\r\n      }\r\n      return (\r\n        <div className=\"value-element\" key={`${KeyPrefix}-${i}`}>\r\n          {Wrapper !== \"img\" ? (\r\n            <Wrapper {...props}>{value}</Wrapper>\r\n          ) : (\r\n            <img src={value} height={height} width={width} />\r\n          )}\r\n          <FontAwesomeIcon icon={faTrash} onClick={() => removeItem(i)} />\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <MultiInputStyles color={color} textColor={textColor}>\r\n      <div className=\"multi-input-elements\">{generateElements()}</div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder={placeholder}\r\n        onKeyPress={handleKeyPress}\r\n        ref={multiInputRef}\r\n        className=\"multi-input-input\"\r\n      />\r\n      <div className=\"error-msg\" ref={errorMsg}></div>\r\n    </MultiInputStyles>\r\n  );\r\n};\r\n\r\nMultiInput.propTypes = {\r\n  /**\r\n   * A string thath work as the input placeholder\r\n   */\r\n  placeholder: PropTypes.string,\r\n  /**\r\n   * The element that wraps the items to add (can be a string (html tag), or a react component)\r\n   */\r\n  Wrapper: PropTypes.oneOfType([\r\n    PropTypes.node,\r\n    PropTypes.element,\r\n    PropTypes.elementType,\r\n    PropTypes.string,\r\n  ]),\r\n  /**\r\n   * Properties for the wrapper component\r\n   */\r\n  wrapperProps: PropTypes.object,\r\n  /**\r\n   * Values of the component, I normally put a state\r\n   */\r\n  values: PropTypes.array,\r\n  /**\r\n   * I use a setState here\r\n   */\r\n  onChange: PropTypes.func,\r\n  /**\r\n   * Prefix to the key of the listed elements\r\n   */\r\n  KeyPrefix: PropTypes.string,\r\n  /**\r\n   * Regular expression to limit the possible entries\r\n   */\r\n  regex: PropTypes.instanceOf(RegExp),\r\n  /**\r\n   * Message displayed if the entry fits with the regex\r\n   */\r\n  regexMsg: PropTypes.string,\r\n  /**\r\n   * This prop only do something if the wrapper is \"img\"\r\n   */\r\n  height: PropTypes.number,\r\n  /**\r\n   * This prop only do something if the wrapper is \"img\"\r\n   */\r\n  width: PropTypes.number,\r\n  /**\r\n   * Aestetic prop\r\n   */\r\n  color: PropTypes.string,\r\n};\r\n\r\nconst MultiInputStyles = styled.div.attrs((props) => ({\r\n  color: props.color || \"#00CCFF\",\r\n  textColor: props.textColor || \"#FFFFFF\",\r\n}))`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  .multi-input-elements {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    max-width: 100%;\r\n    .value-element {\r\n      margin: 0.3rem;\r\n      background-color: ${(props) => props.color};\r\n      padding: 0.3rem 0.5rem;\r\n      border-radius: 0.5rem;\r\n      color: ${(props) => props.textColor};\r\n      .fa-trash {\r\n        margin: 0 0.3rem;\r\n      }\r\n    }\r\n  }\r\n  .multi-input-input {\r\n    display: flex;\r\n    width: 100%;\r\n    border: none;\r\n    border-bottom: 0.1rem solid ${(props) => props.color};\r\n    padding: 0.3rem;\r\n    :focus {\r\n      outline: none;\r\n      border-bottom: 0.2rem solid ${(props) => props.color};\r\n    }\r\n  }\r\n`;\r\n\r\nexport default MultiInput;\r\n",["26","27"],"C:\\Users\\vurau\\Desktop\\rauru-components\\src\\stories\\RichTextEditor.stories.js",["28"],"C:\\Users\\vurau\\Desktop\\rauru-components\\src\\stories\\RichTextEditor.js",["29"],{"ruleId":"30","severity":1,"message":"31","line":4,"column":1,"nodeType":"32","endLine":11,"endColumn":3},{"ruleId":"33","severity":1,"message":"34","line":30,"column":46,"nodeType":"35","messageId":"36","endLine":30,"endColumn":47,"suggestions":"37"},{"ruleId":"33","severity":1,"message":"34","line":30,"column":99,"nodeType":"35","messageId":"36","endLine":30,"endColumn":100,"suggestions":"38"},{"ruleId":"33","severity":1,"message":"34","line":39,"column":46,"nodeType":"35","messageId":"36","endLine":39,"endColumn":47,"suggestions":"39"},{"ruleId":"33","severity":1,"message":"34","line":39,"column":99,"nodeType":"35","messageId":"36","endLine":39,"endColumn":100,"suggestions":"40"},{"ruleId":"41","severity":1,"message":"42","line":65,"column":13,"nodeType":"43","endLine":65,"endColumn":62},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"30","severity":1,"message":"31","line":4,"column":1,"nodeType":"32","endLine":11,"endColumn":3},{"ruleId":"48","severity":1,"message":"49","line":35,"column":3,"nodeType":"50","endLine":35,"endColumn":12,"suggestions":"51"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["52","53"],["54","55"],["56","57"],["58","59"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setInnerValue'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [innerValue, value] as a second argument to the useEffect Hook.","Identifier",["62"],{"messageId":"63","fix":"64","desc":"65"},{"messageId":"66","fix":"67","desc":"68"},{"messageId":"63","fix":"69","desc":"65"},{"messageId":"66","fix":"70","desc":"68"},{"messageId":"63","fix":"71","desc":"65"},{"messageId":"66","fix":"72","desc":"68"},{"messageId":"63","fix":"73","desc":"65"},{"messageId":"66","fix":"74","desc":"68"},"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"removeEscape",{"range":"77","text":"78"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"79","text":"80"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"81","text":"78"},{"range":"82","text":"80"},{"range":"83","text":"78"},{"range":"84","text":"80"},{"range":"85","text":"78"},{"range":"86","text":"80"},"Add dependencies array: [innerValue, value]",{"range":"87","text":"88"},[796,797],"",[796,796],"\\",[849,850],[849,849],[1115,1116],[1115,1115],[1168,1169],[1168,1168],[1303,1303],", [innerValue, value]"]